# ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved.
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *  (at your option) any later version.
# *
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# *****************************************************************************

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# box is cubic with size 100x100x10 
box fixed { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions 
input epi.input

# Read boundary connectivity
# form of the file. 
# # comments/headers
# edge_id particle_id_1 particle_id_2
read_cell_boundary epi.boundary

# Set neighbour list paramters for tissue simulations (please see SAMoS documentation for details)  
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 30.0; max_edge_len = 20.0; triangulation; static_boundary }

# We constrain all particles to move only on the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
#
pair_potential vp { K = 1.0; gamma = 1.0; lambda = -6.0; }
# phase in the vertex model forces based on particle age over a time of 0.2
#pair_potential vp { K = 1.0; gamma = 0.1; lambda = -0.60; phase_in=linear; min_val=0.; max_val=0.2 }


# for particle types with different vertex model parameters
# These lines overwrite the default values given above

# Set lambda between types so that type 2 and type 3 cell contacts are costly
# type 1 is the boundary, type 2 and 3 are cell types
#pair_param vp { type_1=1; type_2=1; lambda = -0.5 }
pair_param vp { type_1=1; type_2=2; lambda = -6.2 }
pair_param vp { type_1=1; type_2=3; lambda = -6.2 }

pair_param vp { type_1=2; type_2=3; lambda = -6.4 }
pair_param vp { type_1=2; type_2=2; lambda = -6.2 }
pair_param vp { type_1=3; type_2=3; lambda = -6.8 }

# line tension only applies to the particles that are on the boundary
pair_potential line_tension { lambda = 2.0; }
pair_potential boundary_bending { kappa = 0.3; }

# Soft repulsion at reasonable distance
pair_potential soft { k = 10.0; a = 1.0 }

# frequent logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim; vp_energy }

# .vtp dumps for data analysis and paraview visualisation 
dump cell { type=vtp; start=0; freq=1000; multi }
dump cell_dual { type=vtp; start=0; freq=1000; multi; dual }
# text dumps for data analysis 
dump cell { type=full; start=0; freq=1000; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# faces files can be used to reconstruct the triangulation and the mesh in python for analysis.
dump faces { type=face; start=0; freq=1000; multi; }


# Running the simulation
#
timestep 0.01

# IMPORTANT. v0 is set to 0. in the integrator. We use 'external self_propulsion {}' command to add activity.
# Open boundaries
integrator brownian_pos {group= internal; seed = 1;  mu = 1.0; temperature_control=constant; min_val=0.05 }


run 500000



