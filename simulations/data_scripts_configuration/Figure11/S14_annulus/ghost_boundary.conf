# ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved.
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *  (at your option) any later version.
# *
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# *****************************************************************************

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# box is cubic with size 100x100x10 
box fixed { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions 
input annulus.input

# Read boundary connectivity
# form of the file. 
# # comments/headers
# edge_id particle_id_1 particle_id_2
read_cell_boundary annulus.boundary

# Set neighbour list paramters for tissue simulations (please see SAMoS documentation for details)  
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 30.0; max_edge_len = 20.0; triangulation; }

# We constrain all particles to move only on the xy plane with lx=100, ly = 100 (actually those are read from the box)
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
#
pair_potential vp { K = 1.0; gamma = 1.0; lambda = -6.0; }


# line tension only applies to the particles that are on the boundary
pair_potential line_tension { lambda = 0.5; }
pair_potential boundary_bending { kappa = 0.0; }

# Soft repulsion at reasonable distance
pair_potential soft { k = 10.0; a = 0.5 }

# Turn off cell-boundary and boundary-boundary soft interactions. Not recommended.
pair_param soft { type_1 = 1; type_2 = 1; k = 0.0 }
#pair_param soft { type_1 = 1; type_2 = 2; k = 0.0 } 


# frequent logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim; vp_energy }

# .vtp dumps for data analysis and paraview visualisation 
dump cell { type=vtp; start=0; freq=100; multi }
dump cell_dual { type=vtp; start=0; freq=100; multi; dual }
# text dumps for data analysis 
dump cell { type=full; start=0; freq=100; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# faces files can be used to reconstruct the triangulation and the mesh in python for analysis.
dump faces { type=face; start=0; freq=100; multi; }

# Population growth dynamics
# If death_rate is non-zero then cells may die with probability based on their age.
# Boundary particles won't divide or die
population cell { group = all; division_rate = 0.01; freq = 25; max_area = 2.8; growth_rate = 0.0005; death_rate = 0.0 }

# IMPORTANT. Adding the activity to the non-boundary particles only. Alpha is v0. Then v0 in the integrator should be set to 0.
external self_propulsion { alpha = 0.0; exclude_boundary; } 

# Running the simulation
#
timestep 0.01

# IMPORTANT. v0 is set to 0. in the integrator. We use 'external self_propulsion {}' command to add activity.
# Open boundaries
# old syntax
integrator brownian {group= all; seed = 1;  nu = 0.1; mu = 1.0;  v0 = 0.0 }


run 500000



