# ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved.
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *  (at your option) any later version.
# *
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# *****************************************************************************

#Template for simulation of dividing cells with no activity

# All runtime messages will be sent to file messages.msg
messages messages.msg
# Not a perfect representation of the configuration set here but extremely convenient to parse.
config configuration {type = json}

# A really large box giving space to grow
box fixed { lx = 1000.0;  ly = 1000.0;  lz = 10.0 }

# We read in particle positions 
input strips.input

# Read boundary connectivity
read_cell_boundary strips.boundary

# Standart parameters for the particle neighbourist. 
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 50.0; max_edge_len = 30.0; triangulation; circumcenter; remove_detached }

# We constrain all particles to move only on the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension/adhesion

pair_potential vp { K = 1.0; gamma = 1.0; lambda = -5.8; phase_in=linear; min_val=0.; max_val=0.5}

# line tension only applies to the particles that are on the boundary
# those particles do not have a polygon assigned to them and are, as such, not considered cells
# These values are sufficient to prevent protrusions at the boundary from touching eachother even for the order of 10^5 cells
pair_potential line_tension { lambda = 0.1; }
pair_potential boundary_bending { kappa = 0.5; }

# Soft repulsion 
# Radius of a = 1.0 helps separate cell centres and stabilise the simulation during division
# Again the soft potential for the new particle is phased in gradually, 
# the voronoi centres of the dividing cell pair will likely be overlapping to start with.
pair_potential soft { k = 10.0; a = 1.0; phase_in=linear; min_val=0.; max_val=0.5 }


# frequent logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim;}

# .vtp dumps for data analysis and paraview visualisation 
dump cell { type=vtp; start=0; freq=1000; multi; include_mesh }
dump cell_dual { type=vtp; start=0; freq=1000; multi; dual }
# text dumps for data analysis 
dump cell { type=full; start=0; freq=1000; multi; id; tp; radius; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# faces files can be used to reconstruct the triangulation and the mesh in python for analysis.
dump faces { type=face; start=0; freq=1000; multi; }


# Population growth dynamics
# If death_rate is non-zero then cells may die with probability based on their age.
# freq = 25 corresponds to checking for divisions and rebuilding the neighbourlist every 25 timesteps. Expensive but gives 'smooth' division.
population cell { group = internal; division_rate = 0.01; freq = 25; max_area = 2.8; growth_rate = 0.002; death_rate = 0.0 }

# Running the simulation

# Lowering the timestep is by far the most reliable way to prevent crashes corresponding to obtuse triangles.
#timestep 0.005
timestep 0.01

# 'boundary', 'internal', 'all', 'tissue' and 'environment' groups automatically created
# Open boundaries
integrator brownian_pos { group=all; seed = 1; mu = 1.0; }


run 200000


